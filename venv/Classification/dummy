from sklearn.model_selection import train_test_split
from sklearn.dummy import DummyClassifier
from helpers import *
import click

# Work on home_team and away_team df from games.csv
features1 = home_team
features1 = features1.dropna(axis=1)

features2 = away_team
features2 = features2.dropna(axis=1)

# Dummy Classifier and GNB
dc_uniform = DummyClassifier(strategy="uniform")
dc_constant_0 = DummyClassifier(strategy="constant", constant=0)
dc_constant_1 = DummyClassifier(strategy="constant", constant=1)
dc_most_frequent = DummyClassifier(strategy="most_frequent")
dc_stratified = DummyClassifier(strategy="stratified")


@click.command()
@click.option('--home/--away', required=True, prompt='Choose whether Home(yes) or Away(No) Dataset to study')
def team_dummy(home):
    if home:
        # Split our data
        train1, test1, train_labels1, test_labels1 = train_test_split(features1, home_team["HOME_TEAM_WINS"],
                                                                      test_size=0.40)
        home_team_accuracy = {}

        model_uni = dc_uniform.fit(train1, train_labels1)
        home_team_accuracy['uniform (random)'] = dc_uniform.score(test1, test_labels1)

        model0 = dc_constant_0.fit(train1, train_labels1)
        home_team_accuracy['constant 0'] = dc_constant_0.score(test1, test_labels1)

        model1 = dc_constant_1.fit(train1, train_labels1)
        home_team_accuracy['constant 1'] = dc_constant_1.score(test1, test_labels1)

        model_freq = dc_most_frequent.fit(train1, train_labels1)
        home_team_accuracy['most frequent label'] = dc_most_frequent.score(test1, test_labels1)

        model_strat = dc_stratified.fit(train1, train_labels1)
        home_team_accuracy['stratified'] = dc_stratified.score(test1, test_labels1)

        print("Classification Accuracy on the Home Team Dataset (40% test set)\n")
        sorted_accuracy = [(k, home_team_accuracy[k]) for k in sorted(home_team_accuracy, key=home_team_accuracy.get,
                                                                      reverse=True)]
        for k, v in sorted_accuracy:
            print(k, v)

    else:
        # Split our data
        train2, test2, train_labels2, test_labels2 = train_test_split(features2, home_team["HOME_TEAM_WINS"],
                                                                      test_size=0.40)
        away_team_accuracy = {}

        model_uni = dc_uniform.fit(train2, train_labels2)
        away_team_accuracy['uniform (random)'] = dc_uniform.score(test2, test_labels2)

        model0 = dc_constant_0.fit(train2, train_labels2)
        away_team_accuracy['constant 0'] = dc_constant_0.score(test2, test_labels2)

        model1 = dc_constant_1.fit(train2, train_labels2)
        away_team_accuracy['constant 1'] = dc_constant_1.score(test2, test_labels2)

        model_freq = dc_most_frequent.fit(train2, train_labels2)
        away_team_accuracy['most frequent label'] = dc_most_frequent.score(test2, test_labels2)

        model_strat = dc_stratified.fit(train2, train_labels2)
        away_team_accuracy['stratified'] = dc_stratified.score(test2, test_labels2)

        print("Classification Accuracy on the Home Team Dataset (40% test set)\n")
        sorted_accuracy = [(k, away_team_accuracy[k]) for k in sorted(away_team_accuracy, key=away_team_accuracy.get,
                                                                      reverse=True)]
        for k, v in sorted_accuracy:
            print(k, v)
